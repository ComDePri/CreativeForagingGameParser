(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["ParserUtils`"]


Parse::usage = "Parse[gameData] parses a single game a returns a 4-column summary of its data, used in any further analysis"


extractMeasures::usage = "extractMeasures[parsedGameData] returns a table where rows are subjects and columns are the 30 standard CFG measures. The output of this function includes a first row of labels for the columns."


R::usage = "R is a dispatch of a mapping from every serial number to the grid coordinates of a shape."


AllGallerySP::usage = "AllGallerySP is a dispatch of a mapping from each pair of serial numbers of shapes to the length of the shortest path between them. Accounts only for shapes ever saved to gallery."


g::usage = "g is the graph of shapes."


Begin["`Private`"]


coor2shape[x_]:=ToString/@DeleteCases[(2^(Reverse@Range[0,9]).#)&/@Normal@SparseArray[Thread[x->1],10],0]


Parse[gameData_]:=Module[{
starttime=DateObject@Cases[#,{___,"startsearch",___}][[1,3]],
per=Position[#,"startsearch"][[1,1]]+1},
{
(*StringSplit[#[[1,5]],","]*)
Check[StringDelete[#[[1,11,"userProvidedId"]]," "],#[[1,11,"userId"]]]//Quiet,
starttime,
If[Length@#==2,#,#[[;;3]]]&/@(Join@@{{coor2shape[(#-Min/@(#)+1)\[Transpose]]&@((Reverse/@#)\[Transpose])&@ToExpression[#[[1,3]]/.x_String:>StringReplace[x,{"["->"{","]"->"}"}]]},DateDifference[starttime,DateObject/@#[[;;,1]],"Second"][[;;,1]]}&/@Split[
Prepend[
Cases[#[[per;;]],{___,"movedblock"|"added shape to gallery",___}][[;;,{3,12,19,23}]],
{Cases[#,{___,"startsearch",___}][[1,3]],"movedblock","[[0,0],[1,0],[2,0],[4,0],[5,0],[6,0],[3,0],[7,0],[8,0],[9,0]]",""}],MatchQ[#2,{___,"added shape to gallery",___}]&]),
""(*coor2shape[(#-Min/@(#)+1)\[Transpose]]&@((Reverse/@#)\[Transpose])&/@ToExpression[Cases[#,{___,"selected shape",___}][[1,19]]/.x_String\[RuleDelayed]StringReplace[x,{"["\[Rule]"{","]"\[Rule]"}"}]]*)}]&@gameData


ShapePlot5a[s_,OptionsPattern[{"BackgroundColor"->Black}]]:=
MatrixPlot[ArrayPad[#,{Ceiling[(12-#)/2],Floor[(12-#)/2]}&/@Dimensions[#]],AspectRatio->Automatic,FrameTicks->False,ImageSize->100,Frame->False,ColorRules->{0-> OptionValue["BackgroundColor"],1->Green},Mesh->True,MeshStyle->OptionValue["BackgroundColor"],FrameStyle->Thickness[.2]]&@Transpose[DeleteCases[Transpose[(IntegerDigits[#1,2,10]&)/@ToExpression[s]],{0..}]]


alledges=ReadList["alledges.txt"];


allshapes=ReadList["allshapes.txt"];


r=MapIndexed[#1->ToString[#2[[1]]]&,Map[coor2shape,allshapes]];


R=Dispatch[r];


backr=Dispatch[Reverse/@r];


g=Graph[UndirectedEdge@@@alledges/.R];


symrule=Dispatch@ReadList["symrule.txt"];


calcOrigUnited[parsedSubjectData_]:=Module[{data={ReadList["Vanilla.txt"],parsedSubjectData},allShapesAndTimes,galleryShapesAndTimes,galleryShapes},
allShapesAndTimes=Join@@Join@@data[[;;,;;,3]];
galleryShapesAndTimes=Select[allShapesAndTimes,Length@#==3&];
galleryShapes=galleryShapesAndTimes[[;;,1]];
Dispatch[Thread[(#[[1]]/.R)->-Log10[N@(#[[2]]/Total@#[[2]])]]&@(Tally@galleryShapes\[Transpose])]
]


AllGallerySP=Dispatch[ReadList["utils/AllGallerySP.txt"]]


findclusters2[game_]:=Module[{},
AllGallerySP=Dispatch[ReadList["utils/AllGallerySP.txt"]];
Flatten[#,1]&/@Nest[
Split[#,Flatten[#1][[1]]>Flatten[#2][[1]]&]&,{
Prepend[Differences@#[[1]],0](*\[Delta]t*),
#[[1]](*accumulated time*),
Partition[Prepend[ToExpression@#[[-1]],1],2,1]/.AllGallerySP(*shortest path*),
#[[2]](*real path*),
Accumulate@#[[2]](*accumulated steps*),
#[[-1]](*shape*)}\[Transpose]&@(Map[
{#[[-1,-2]],Length[#],#[[-1,1]]}&,
Select[
Split[game[[-2]]/.R,Length[#]=!=3&],
Length[#[[-1]]]==3&]
]\[Transpose]),2]
]


info[ParsedSubjectData_]:=Module[{ClusteredParsedSubjectData,Orig,GalleryCount,GC,SubjectClusters,crule,crulereverse,scedges,SCG,CC,VLs,GraphCommunities,OrigUnited},
ClusteredParsedSubjectData=findclusters2/@ParsedSubjectData;
Orig=Dispatch[Thread[(#[[1]]/.R)->-Log10[N@(#[[2]]/Total@#[[2]])]]&@(Tally[Cases[ParsedSubjectData,{x_List,y_Real,z_Real}:>x,\[Infinity]]]\[Transpose])];
OrigUnited=calcOrigUnited[ParsedSubjectData];
GalleryCount=Dispatch[Rule@@@Tally[Flatten[DeleteDuplicates/@Flatten/@ClusteredParsedSubjectData[[;;,;;,;;,-1]]]]];
GC=ConnectedComponents[Graph[UndirectedEdge@@@Select[Subsets[Select[Union@@ClusteredParsedSubjectData[[;;,;;,;;,-1]],Length@#>2&],{2}],Length[Intersection@@#]>1&],GraphLayout->None]][[1]];
SubjectClusters=Select[Union/@#[[;;,;;,-1]],Length@#>2&]&/@ClusteredParsedSubjectData;crule=Dispatch[(Thread[#->Range@Length@#]&@(Join@@SubjectClusters))];
crulereverse=Dispatch[Reverse/@Normal@crule];
scedges=(UndirectedEdge@@@Select[Subsets[Join@@SubjectClusters,{2}],Length[Intersection@@#]>=3&]/.crule);

SCG=Graph[scedges];
CC=Subgraph[#,ConnectedComponents[#][[1]]]&@SCG;

VLs=VertexList[CC];
GraphCommunities=FindGraphCommunities[(Subgraph[#,ConnectedComponents[#][[1]]]&@SCG),Method->"Modularity"];
Flatten/@({
{#[[1]],#[[2]],
#[[3,-1,-1]],
Length@#[[3]],
Length@#[[3]]/#[[3,-1,-1]],
Count[#[[3]],_?(Length@#==3&)],
N@(Length@DeleteDuplicates[#]/Length@Split[#])&@#[[3,;;,1]](*,
Mean[Cases[DeleteCases[#[[-1]],HoldPattern[SparseArray[__]]]/.R/.Orig,_Real]]*)(*,Mean[Cases[DeleteCases[#[[-1]],HoldPattern[SparseArray[__]]]/.R/.OrigUnited,_Real]]*)}&/@ParsedSubjectData,
N@{Count[#,_?(Length@#>2&)],
1-Length@Flatten@Select[#,Length@#>2&]/Length[Flatten@#]&@#[[;;,;;,-1]],
Total@Flatten@Select[#,Length@#<3&]/Total@Flatten@#&@#[[;;,;;,1]],
{#,#[[1]]/#[[2]]}&@{
Median@(#[[1]]/#[[2]]&/@(Join@@DeleteCases[DeleteCases[Select[#,Length@#<=2&],{1,1},\[Infinity]],{}]))&@#[[;;,;;,{3,4}]],
Median@(#[[1]]/#[[2]]&/@(Join@@DeleteCases[DeleteCases[Select[#,Length@#>2&],{1,1},\[Infinity]],{}]))&@#[[;;,;;,{3,4}]]},
Median/@({Total/@Split[#,Length@#1==1&][[;;,;;,1]],Total/@Select[#,Length@#>2&][[;;,2;;]]}&@#[[;;,;;,4]]),Mean@Cases[Flatten[#],_Real]&/@Map[#[[2]]/#[[1]]&,{Split[#,Length@#1==1&][[;;,;;,1]],Select[#,Length@#>2&][[;;,2;;]]}&@#[[;;,;;,{1,4}]],{3}],
Mean@(Flatten[#[[;;,;;,-1]]]/.Orig),
Mean@(Flatten[#[[;;,;;,-1]]]/.OrigUnited),
{Mean/@({Flatten[Split[#,Length@#1==1&][[;;,;;,1]]],Flatten[Select[#,Length@#>1&][[;;,2;;]]],Flatten[Select[#,Length@#>1&][[;;,1]]]}&@#[[;;,;;,-1]]/.Orig),
Mean/@({Flatten[Split[#,Length@#1==1&][[;;,;;,1]]],Flatten[Select[#,Length@#>1&][[;;,2;;]]],Flatten[Select[#,Length@#>1&][[;;,1]]]}&@#[[;;,;;,-1]]/.OrigUnited)}\[Transpose],
{N@(Count[#,1]/Length@#)&@((DeleteDuplicates[Flatten[#[[;;,;;,-1]]]]/.GalleryCount)),N@(Count[#,1]/Length@#)&@((DeleteDuplicates[Flatten[Split[#,Length@#1==1&][[;;,;;,-1]]]]/.GalleryCount)),N@(Count[#,1]/Length@#)&@((DeleteDuplicates[Flatten[Select[#,Length@#>1&][[;;,2;;,-1]]]]/.GalleryCount))}}&/@ClusteredParsedSubjectData,
{(*Count[Select[#[[2]],Length@#>2&][[;;,1]],Alternatives@@#[[1]]],*)
N@(Count[GC,Alternatives@@#[[2]]]/{1,Length@#[[2]]})}&/@({ParsedSubjectData[[;;,-1]]/.R,ClusteredParsedSubjectData[[;;,;;,;;,-1]]}\[Transpose]),(Max/@Differences/@(ParsedSubjectData[[;;,3,4;;-4,2]]))/60.}\[Transpose])];


extractMeasures[ParsedSubjecData_]:=Module[{measures, measuresFromData},
measures={"ID", "Date/Time","Total \nPlay \nTime","Total \n# \nmoves","Average \nSpeed","galleries\n#","self \navoidance",(*"Uniqueness of rated shapes",*)(*"Uniqueness of rated shapes (united)",*)"clusters\n#","% shapes \nin exp","% time \nin exp","exp \noptimality","scav \noptimality","optimality\nratio","median # steps \nbetween shapes \nin exp","median # steps \nbetween shapes \nin scav","exp\nspeed","scav\nspeed","Orig","Orig (united)","Orig \nexp","Orig exp (united)","Orig \nscav","Orig scav (united)","Orig \ntrans","Orig trans (united)","Unique \nShapes","Unique \nShapes exp","Unique \nShapes scav",(*"trans rated",*)"# clusters \nin GC","% clusters \nin GC","max \[CapitalDelta]t \n(min)"};
measuresFromData=info[ParsedSubjecData]//Quiet;
Prepend[measuresFromData,measures]
]


End[]


EndPackage[]
